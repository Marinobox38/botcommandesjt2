import os
from dotenv import load_dotenv
import discord
import requests
from bs4 import BeautifulSoup
from discord.ext import commands, tasks
from discord.ext import commands, tasks
from discord import app_commands
from keep_alive import keep_alive

load_dotenv()
DISCORD_TOKEN= os.getenv('DISCORD_TOKEN')

# ========== CONFIGURATION ==========
CHANNEL_ID = 1364912996379529256  # ID de ton salon #test-marin
ROLE_ID = 1357005838144897155      # Remplace par l'ID du r√¥le @notif-blog

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ========== T√ÇCHE DE FOND ==========
@tasks.loop(minutes=30)
async def check_updates():
    url = "https://journaltheatral.com/blog"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")

        article = soup.select_one("article")
        if not article:
            print("Aucun article trouv√©.")
            return

        title_tag = article.select_one("h2")
        article_title = title_tag.get_text(strip=True) if title_tag else "Titre non disponible"

        link_tag = article.select_one("a[href]")
        article_url = link_tag["href"] if link_tag else url
        if not article_url.startswith("http"):
            article_url = "https://journaltheatral.com" + article_url

        description_tag = article.select_one("p")
        article_description = description_tag.get_text(strip=True)[:300] + "..." if description_tag else "Pas de description."

        embed = discord.Embed(
            title=article_title,
            url=article_url,
            description=article_description,
            color=discord.Color.blue()
        )

        channel = await bot.fetch_channel(CHANNEL_ID)
        await channel.send(content=f"<@&{ROLE_ID}>", embed=embed)

    except Exception as e:
        print(f"Erreur lors de la v√©rification : {e}")

# ========== COMMANDES SLASH ==========
@bot.command()
async def verif(ctx):
    """Force une v√©rification imm√©diate"""
    await ctx.send("V√©rification manuelle lanc√©e...")
    await check_updates()

@bot.tree.command(name="infos", description="Affiche des infos sur le Journal Th√©√¢tral")
async def infos_command(interaction: discord.Interaction):
    text = (
        "Le Journal Th√©√¢tral a √©t√© fond√© en 2023, alors que nous √©tions en 4√®me, par Th√©o. "
        "Il a fait confiance √† quelques membres et ils ont sorti plusieurs num√©ros cette ann√©e-l√†. "
        "Aujourd'hui, nous sommes 8 membres et le journal conna√Æt une belle croissance. "
        "Le site Internet du Journal Th√©√¢tral a √©t√© cr√©√© par Marin, √©paul√© de Elya. Il nous permet de partager "
        "les actualit√©s de notre classe et nos journaux √† nos professeurs, les autres classes mais aussi nos familles. "
        "Vous √™tes ainsi au c≈ìur de la vie de la 3√®me4. Nous sommes la classe th√©√¢tre de l'Externat Notre Dame, "
        "la 3√®me4 (anciennement 4√®me5).\n\n"
        "Depuis un an maintenant, Mme Bertocchi, aid√©e de Mme Caillet notre prof de fran√ßais, nous apprend le th√©√¢tre "
        "dans l'objectif de monter une pi√®ce que nous jouerons en juin 2025. Au programme, au-del√† des r√©pliques, "
        "nous aurons chant, danse, tableaux...\n\n"
        "Nous sommes une classe enthousiaste, soud√©e et des projets plein la t√™te : ce journal, la pi√®ce de fin d'ann√©e, "
        "des journ√©es √† th√®mes, sorties, go√ªters..."
    )
    await interaction.response.send_message(text, ephemeral=True)

@bot.tree.command(name="site", description="Affiche le lien du site du Journal Th√©√¢tral")
async def site_command(interaction: discord.Interaction):
    await interaction.response.send_message("üîó https://journaltheatral.com", ephemeral=False)

@bot.tree.command(name="message", description="Envoie un message personnalis√© dans le salon")
@app_commands.describe(texte="Le message √† envoyer")
async def message_command(interaction: discord.Interaction, texte: str):
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message("‚õî Tu n'as pas la permission d'utiliser cette commande.", ephemeral=False)
        return
    await interaction.channel.send(texte)
    await interaction.response.send_message("‚úÖ Message envoy√© avec succ√®s.", ephemeral=True)

@bot.tree.command(name="ban", description="Bannit un utilisateur du serveur")
@app_commands.describe(user="L'utilisateur √† bannir", reason="Raison du bannissement (optionnel)")
async def ban_command(interaction: discord.Interaction, user: discord.Member, reason: str = "Aucune raison sp√©cifi√©e"):
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message("‚õî Tu n'as pas la permission de bannir des membres.", ephemeral=True)
        return
    try:
        await user.ban(reason=reason)
        await interaction.response.send_message(f"üö´ {user.mention} a √©t√© banni.\nüìù Raison : {reason}")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Impossible de bannir ce membre : {e}")
    
# ========== KICK ==========
@bot.tree.command(name="kick", description="Expulse un utilisateur du serveur")
@app_commands.describe(user="L'utilisateur √† expulser", reason="Raison de l'expulsion (optionnel)")
async def kick_command(interaction: discord.Interaction, user: discord.Member, reason: str = "Aucune raison sp√©cifi√©e"):
    if not interaction.user.guild_permissions.kick_members:
        await interaction.response.send_message("‚õî Tu n'as pas la permission d'expulser des membres.", ephemeral=True)
        return
    try:
        await user.kick(reason=reason)
        await interaction.response.send_message(f"üë¢ {user.mention} a √©t√© expuls√©.\nüìù Raison : {reason}")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Impossible d‚Äôexpulser ce membre : {e}")

# ========== MUTE ==========
@bot.tree.command(name="mute", description="Donne le r√¥le 'Mute' √† un utilisateur")
@app_commands.describe(user="Utilisateur √† r√©duire au silence")
async def mute_command(interaction: discord.Interaction, user: discord.Member):
    mute_role = discord.utils.get(interaction.guild.roles, name="Mute")
    if not mute_role:
        await interaction.response.send_message("‚ùå Le r√¥le 'Mute' n'existe pas. Cr√©e-le manuellement d'abord.", ephemeral=True)
        return
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("‚õî Tu n'as pas la permission de g√©rer les r√¥les.", ephemeral=True)
        return
    await user.add_roles(mute_role)
    await interaction.response.send_message(f"üîá {user.mention} a √©t√© r√©duit au silence.")

# ========== UNMUTE ==========
@bot.tree.command(name="unmute", description="Retire le r√¥le 'Mute' √† un utilisateur")
@app_commands.describe(user="Utilisateur √† r√©tablir")
async def unmute_command(interaction: discord.Interaction, user: discord.Member):
    mute_role = discord.utils.get(interaction.guild.roles, name="Mute")
    if not mute_role:
        await interaction.response.send_message("‚ùå Le r√¥le 'Mute' n'existe pas.", ephemeral=True)
        return
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("‚õî Tu n'as pas la permission de g√©rer les r√¥les.", ephemeral=True)
        return
    await user.remove_roles(mute_role)
    await interaction.response.send_message(f"üîä {user.mention} peut de nouveau parler.")

# ========== CLEAR ==========
@bot.tree.command(name="clear", description="Supprime un nombre de messages dans le salon")
@app_commands.describe(nombre="Nombre de messages √† supprimer (max 100)")
async def clear_command(interaction: discord.Interaction, nombre: int):
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message("‚õî Tu n'as pas la permission de g√©rer les messages.", ephemeral=True)
        return
    if nombre < 1 or nombre > 100:
        await interaction.response.send_message("‚ö†Ô∏è Tu dois entrer un nombre entre 1 et 100.", ephemeral=True)
        return
    deleted = await interaction.channel.purge(limit=nombre)
    await interaction.response.send_message(f"üßπ {len(deleted)} messages supprim√©s.", ephemeral=False)



# ========== √âV√âNEMENTS ==========
@bot.event
async def on_ready():
    print(f"Bot connect√© en tant que {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"Commandes synchronis√©es : {len(synced)}")
    except Exception as e:
        print(f"Erreur lors de la sync des commandes : {e}")
    check_updates.start()

# ========== LANCEMENT ==========
keep_alive()
bot.run(DISCORD_TOKEN)
